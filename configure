#!/bin/bash
if [ "X$1" != "Xlocal" -a "X$1" != "Xtest" -a "X$1" != "Xsit" -a "X$1" != "Xprod" ]; then
    echo "Please select env: local test sit prod"
    echo "Such as ./configure sit"
    exit
fi

TFS_SERVER=
REDIS_SERVER=
REDIS_SERVER_DUBBO_WRITE=
HTTP_SERVER=
HTTP_PORT=10502
CPU=

#cpu count
ip_command=`cat /proc/cpuinfo | grep processor | wc -l`
CPU=`echo $ip_command`
if [ $CPU -gt 16 ]; then
    CPU=16
fi
echo "Checking cpu count...  $CPU"
if [ "X$CPU" == "X0" ]; then
    echo "Error: can't get cpu count!"
    exit
fi

#inet addr:ip
if ifconfig |grep eth0 >/dev/null ;then
    ip_command=`ifconfig eth0 | grep 'inet addr' | awk '{ print $2}' | awk -F: '{print $2}'`
    HTTP_SERVER=`echo $ip_command`
    if [ -z "$HTTP_SERVER" ]; then
        ip_command=`ifconfig eth0 | grep 'inet ' | awk '{ print $2}'`
        HTTP_SERVER=`echo $ip_command`
    fi
fi
#prod
if [ "X$HTTP_SERVER" == "X" ]; then
    if ifconfig |grep bond0 >/dev/null ;then
        ip_command=`ifconfig bond0 | grep 'inet addr' | awk '{ print $2}' | awk -F: '{print $2}'`
        HTTP_SERVER=`echo $ip_command`
    fi
fi
echo "Checking local ip...  $HTTP_SERVER"
if [ "X$HTTP_SERVER" == "X" ]; then
    echo "Error: can't get local ip!"
    exit
fi

# local or sit env
if [ $1 == "local" -o $1 == "sit" ]; then   
    TFS_SERVER="10.213.33.177:11100"
    REDIS_SERVER="10.213.33.155:10388"
    REDIS_SERVER_DUBBO_WRITE="10.77.135.117:16379"
fi
# test
if [ $1 == "local" -o $1 == "sit" ]; then   
    TFS_SERVER="10.213.33.177:11100"
    REDIS_SERVER="10.213.33.155:10388"
    REDIS_SERVER_DUBBO_WRITE="10.77.135.117:16379"
fi
# prod
if [ $1 == "prod" ]; then
    TFS_SERVER="10.209.18.2:11100"
    REDIS_SERVER="10.209.33.19:10388"
    REDIS_SERVER_DUBBO_WRITE="10.209.18.61:16379"   
fi

if [ -z "$TFS_SERVER" -o -z "$REDIS_SERVER" -o -z "$REDIS_SERVER_DUBBO_WRITE" ]; then
    echo "Invalid environment: $1"
    exit
fi

# set worker_processes
sed -ri "s/(.*)worker_processes\s+([0-9]+)/\1worker_processes  $CPU/g" nginx.conf

#set lua_package_path
sed -ri "s/(.*)lua_package_path(.*)\?\.(.*)/\1lua_package_path \"\/var\/wd\/wrs\/webroot\/picture\/?.\3/g" nginx.conf

# set http port
sed -ri "s/(.*)listen\s+80/\1listen $HTTP_PORT/g" nginx.conf

##According to port match

#redis server
sed -ri "s/(.*)server\s*(([0-9]+\.){3}[0-9]+):10388(.*)/\1server $REDIS_SERVER\4/g" nginx.conf

#tfs server
sed -ri "s/(.*)server\s*(([0-9]+\.){3}[0-9]+):11100/\1server $TFS_SERVER/g" nginx.conf

#http server
sed -ri "s/(.*)server_name\s*(([0-9]+\.){3}[0-9]+).*/\1server_name $HTTP_SERVER;/g" nginx.conf

#redis double write server
sed -ri "s/(.*)redis2_pass\s*(([0-9]+\.){3}[0-9]+):16379(.*)/\1redis2_pass $REDIS_SERVER_DUBBO_WRITE\4/g" nginx.conf

# forbidden
sed -ri "s/(.*)$remote_addr = (([0-9]+\.){3}[0-9]+)(.*)/\1$remote_addr = $HTTP_SERVER\4/g" nginx.conf

#---------test----------
sed -ri "s/(.*)IP\s=(.*)/\1IP = '$HTTP_SERVER:10502'/g" tests/img.py


echo "tfs_server: $TFS_SERVER"
echo "redis_server: $REDIS_SERVER"
echo "redis_server_dubbo_write: $REDIS_SERVER_DUBBO_WRITE"
echo "http_server: $HTTP_SERVER"
echo "worker_processes: $CPU"

echo "Starting make ..."

# back nginx.conf
DATE=$(date +%m%d%H%M)
if [ -f /usr/local/tengine/conf/nginx.conf ]; then
    cp /usr/local/tengine/conf/nginx.conf /usr/local/tengine/conf/nginx.${DATE}
    echo "Back-up /usr/local/tengine/conf/nginx.conf to /usr/local/tengine/conf/nginx.${DATE}"
fi
py=""

if type py 2>/dev/null; then
    py="py"
elif type python 2>/dev/null; then
    py="python"
else
    echo >&2 "Require python but it's not installed.  Aborting."
    exit 1
fi

PIC_MAKEFILE=./Makefile

echo "creating $PIC_MAKEFILE"
cat << END                                                     > $PIC_MAKEFILE

all :
	@echo "Please input make install..."

install : nginx.conf
	mv /usr/local/tengine/conf/nginx.conf  /usr/local/tengine/conf/nginx.bak
	install -c -m 644 nginx.conf /usr/local/tengine/conf/
	chmod 755 ./tests/img.py
	chmod 755 ./nginx_log_roll

nginx.conf :

test : tests/b.jpg tests/c.png tests/img.py tests/constants.py
	./tests/img.py

tests/b.jpg :

tests/c.png :

tests/img.py :

tests/constants.py :

clean :
	mv /usr/local/tengine/conf/nginx.bak /usr/local/tengine/conf/nginx.conf

.PHONY: all install test clean

END
