#resty.http: from https://github.com/liseen/lua-resty-http
#user  root;
worker_processes  1;

#error_log  logs/error.log debug_core debug_http;
error_log   logs/error.log;
#error_log  logs/error.log info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

# load modules compiled as Dynamic Shared Object (DSO)
#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}

http {
    include       mime.types;
    #default_type  application/octet-stream;
    default_type  text/html;    
    
    lua_package_path "/var/wd/wrs/webroot/picture/?.lua;;";
    lua_shared_dict htmls 4m;
    proxy_buffers 8 1m;
    proxy_busy_buffers_size  1m;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent $request_length $request_time "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for" "$host"';

    access_log  logs/access.log  main;
    log_empty_request off;
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    upstream redis_6384{
        #server unix:/home/shaojun3/tmp/redis_test/data/redis_test_1_online.sock weight=1 max_fails=3 fail_timeout=1s;
        server 10.213.33.155:10388 weight=1 max_fails=3 fail_timeout=1s;
        keepalive 512;
    }

    tfs_upstream tfs_ns {
        server 10.213.33.177:11100;
        type ns;
        #rcs_zone name=tfs1 size=128M;
        #rcs_interface eth0;
        #rcs_heartbeat lock_file=/logs/lk.file interval=10s;
    }
    tfs_body_buffer_size 2m;
    tfs_send_timeout 3s;
    tfs_connect_timeout 3s;
    tfs_read_timeout 3s;
    #gzip  on;

    server {
        listen 10500;
        listen 10502;
        server_name 192.168.10.248;
        #chunked_transfer_encoding       off;
        set $v1_url "http://127.0.0.1:10500/v1/tfs";
        set $image_root /usr/local/tfsimage;
        client_max_body_size  1024m;
        client_header_timeout 60;
        send_timeout 60;
        # lua request tfs
        lua_socket_pool_size 15;
        lua_socket_keepalive_timeout 300;
        # tfs
        tfs_keepalive max_cached=100 bucket_count=15;
        # nobody user user does not have permission to /usr/local/...
        tfs_log "pipe:/usr/sbin/cronolog -p 1days /tmp/tengine/logs/cronolog/%Y/%m/%Y-%m-%d-tfs_access.log" error;

        ## --------sort by nginx location priority: = > ^~ > ~ > /------------

        location  = /tfs/favicon.ico {
            rewrite ^  /favicon.ico break;
        }

        location ^~ /innerImages {
            internal;

            header_filter_by_lua '
            local ngx = require "ngx"
            local img_server = require "imageserver"
            local uri = ngx.var.uri;
            uri = string.gsub(uri, "^%/innerImages", "")
            local img = img_server.get_tfs_as_img(nil, "/usr/local/tfsimage" .. uri)
            ngx.header["Content-Type"] = img:get_minitype()
            img:destroy()
            ';
            alias /usr/local/tfsimage;
            expires max;
            tcp_nodelay off;
            tcp_nopush on;
        }

        location ^~ /innerCahe {
            internal;

            alias /usr/local/tfsimage;
            expires max;
            tcp_nodelay off;
            tcp_nopush on;
        }

        # save picture extend options, such as _q .webp
        set $g_src "i1";
        set $g_nor "i2";
        set $g_lab "i3";
        set $g_usr "i4";
        set $g_tfs "i5";

        # math /*_.jpg or /*_.png or /*_.jif or /*_.png
        set $g_fmt "";
        location ~ "^/(.*?)(?:_\.(?<g_fmt>jpg|jpeg|gif|png))$" {
            set $path $1;
            rewrite ^ /$path last;
        }

        # v1-math /*.webp or /*_.webp
        location ~ "^/(.*?)(?:_??\.(?<g_fmt>webp))$" {
            set $path $1;
            rewrite ^ /$path last;
        }

        # match /*_q70
        set $g_q "";
        location ~ "^/(.*?)(?:_q(?<g_q>\d+))$" {
            set $path $1;
            if ($g_q !~ "^([3-8]\d|90)$") {
                return 404;
            }
            rewrite ^ /$path last;
        }

        # match /*_100x100 or /*_100x100! or /*_100x100!! or /*_100x /*_x100
        set $g_w "";
        set $g_h "";
        set $g_r "";
        location ~ "^/(.*?)_(?<g_w>[1-9]\d{1,2})?x(?<g_h>[1-9]\d{1,2})?(?<g_r>!|!!)?$" {
            set $path $1;
            rewrite ^ /$path last;
        }

        # match /*_100!/* or /*_100!!/*
        location ~ "^/(.*?/)?(\w+)_([1-9]\d{1,2})(?<g_r>!|!!)/(?<tail>.*?)$" {
            set $path $1;
            set $norm $2;
            set $size $3;
            rewrite ^ /$path${norm}_$size/$tail last;
        }

        set $g_gv "";
        set $g_gv_x "";
        set $g_gv_y "";
        # match /*/nw/* or */sw/* or */nwx20y20/* ...
        location ~ "^/(.*?)/(?<g_gv>nw|ne|sw|se|ct|n|s|w|e)(?:x(?<g_gv_x>\d+)y(?<g_gv_y>\d+))?/(?<tail>.*)$" {
            set $path $1;
            rewrite ^ /$path/$tail last;
        }
        
        # match /tfs/i1/* or /tfs/i2/* ...
        location ~ "^(?:/tfs)/(?<cat>i\d)/(?<tail>.*)$" {
            rewrite ^ /$cat/$tail last;
        }

        # temporary location for 12.12. Must precede other locations
        location ~ "^/(.*)/label_(\d+)_(T[^/]{17,50})$" {
            set $path $1;
            set $label_id $2;
            set $tfsname  $3;
            rewrite ^ /$g_lab/label_$label_id/$tfsname last;
        }

        # match /tfs/label_1/* or /tfs/orig/label_1/*
        location ~ "^/tfs/(orig/|)label_(\d+)/([[:alnum:]_\.]{18,50})$" {
            set $label_id $2;
            set $tfsname $3;
            rewrite ^  /$g_lab/label_$label_id/$tfsname last;
        }

        # match /i3/label_1/tfsname
        location ~ "^/i3/label_(\d+)/([[:alnum:]_\.]{18,50})$" {
            set $label 'label_$1';
            set $tfsname $2;
            set $_src '';
            set $_size '';
            set $_q '';
            set $_fmt '';
            set_by_lua $reqPath '
                local cache = require "util.cache"
                if cache.isNil(ngx.var.g_gv) then
                    ngx.var.g_gv = "nw"
                end
                local _path, _src, _size, _q, _fmt = cache.path_label(
                    ngx.var.g_lab, ngx.var.label, ngx.var.tfsname, 
                    ngx.var.g_fmt, ngx.var.g_q, 
                    ngx.var.g_w, ngx.var.g_h, ngx.var.g_r, 
                    ngx.var.g_gv, ngx.var.g_gv_x, ngx.var.g_gv_y)
                ngx.var._src = _src
                ngx.var._size = _size
                ngx.var._q = _q
                ngx.var._fmt = _fmt
                return _path     
            ';
            set $filePath "$image_root$reqPath";
            # todo: 
            if ( $tfsname ~* "^h00.*") {
                return 404;
            }
            if (-f $filePath) {
                rewrite ^ /innerImages$reqPath last;
            }
            if (!-f $filePath) {
                rewrite_by_lua '
                local img_server = require "imageserver"
                local i_util = require "magick.thumb"
                local cache = require "util.cache"

                local src_f, img, err
                local trace = cache.make_trace()
                if _q ~= "" then
                     src_f = ngx.var.image_root .. ngx.var._src .. ngx.var._size .. ngx.var._q
                      img = img_server.load_image(src_f)
                end
                if _size ~= "" and img == nil then
                    src_f = ngx.var.image_root .. ngx.var._src .. ngx.var._size
                    img = img_server.load_image(src_f)
                else
                    trace("_q", true)
                end
                if img == nil then
                    -- composite
                    local label = "/usr/local/tengine/html/" .. ngx.var.label .. ".png"
                    img, err = img_server.get_composite_as_image( 
                        ngx.var.v1_url, ngx.var.tfsname, label, ngx.var.g_gv)
                else
                    trace("_size", true)
                end
                if not (img) then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                -- resize
                if not trace("_size") and ngx.var._size ~= "" then
                    i_util.resize(img, ngx.var.g_w, ngx.var.g_h, ngx.var.g_r)
                end

                if not trace("_q") and ngx.var._q ~= "" then
                    img:set_quality(tonumber(ngx.var.g_q))
                end

                img:to_webp(ngx.var.g_fmt)

                -- write file to local 
                cache.make_dir(ngx.var.filePath)
                local ok, msg, code = img:write(ngx.var.filePath)
                img:destroy()
                if not (ok) then
                    ngx.log(ngx.ERR, "ivk method[img:write] error, code:" .. code .. " msg:" .. msg)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true);   
                ';
            }
        }

        # match /norm_100/label_1/* or /orig/label_1/* or /label_1/*
        # label image on the left-top
        location ~ "^/(?:norm_(\d{1,3})/|orig/|)label_(\d+)/([[:alnum:]_\.]{18,50})$" {
            set $g_w $1;
            set $g_h $1;
            set $label_id $2;
            set $tfsname $3;
            rewrite ^  /$g_lab/label_$label_id/$tfsname last;
        }

        # # mfs => tfs
        location ~ "^/(.*)/([^/]*)h00([[:alnum:]_]{30,50})$" {
            set $path $1;
            set $h00prefix $2;
            set $h00name $3;
            rewrite_by_lua '
            local img_server = require "imageserver"

            local tfs_name = img_server.get_tfsname(ngx.var.h00name)
            if tfs_name == nil then
                ngx.exit(ngx.HTTP_NOT_FOUND)
            else
                ngx.req.set_uri("/" .. ngx.var.path .. "/" .. ngx.var.h00prefix .. tfs_name, true)
            end
            ';
        }

        location ~ "^/v1/tfs/orig/[[:alnum:]\._]{18,50}$" {
            rewrite ^/v1/tfs/orig/(.*) /v1/tfs/$1 last;
        }

        location ~ "^/v1/tfs" {
            #chunked_transfer_encoding       off;
            # tfs_pass unsupport limit_except
            #limit_except GET POST {
            #    allow 192.168.10.248;
            #    allow 127.0.0.1;
            #    deny  all;
            #}
            keepalive_timeout 300;
            if ($request_method = PUT) {set $flag "1";}
            if ($request_method = DELETE) {set $flag "1";}
            if ($remote_addr = 127.0.0.1) {set $flag "";}
            if ($flag = "1") {return 403;}
            if ($flag != "1") {
                tfs_pass tfs://tfs_ns;
            }
        }

        location ~ "^/v2/tfs/orig/[[:alnum:]\._]{18,50}$" {
            rewrite ^/v2/tfs/orig/(.*) /v2/tfs/$1 last;
        }

        # no cache
        location ~ "^/v2/tfs/(.*)" {
            set $tfsname $1;
            if ($tfsname ~ ^$) {
                return 404;
            }
            if ($http_range !~ ^$) {
                rewrite ^ /i5/$tfsname last;
            }
            if ($host ~ '^img.*ffan.com$' ) {
               rewrite ^ /i1/$tfsname last;
            }
            content_by_lua '
            local img_server = require "imageserver"
            local blob = img_server.get_tfs_as_blob(ngx.var.v1_url .. "/", ngx.var.tfsname)
            if not (blob) then
                ngx.exit(ngx.HTTP_NOT_FOUND)
            end
            local header =blob:sub(1,3)
            if header == "\255\216\255" then
                ngx.header["Content-Type"] = "image/jpeg"
            elseif blob:sub(1,8) == "\137\80\78\71\13\10\26\10" then
                ngx.header["Content-Type"] = "image/png"
            else
                local mimetypes = require "mimetypes"
                ngx.header["Content-Type"] = mimetypes.get_type(ngx.var.tfsname, blob:sub(1,8))
            end
            ngx.header["Content-Length"] = #blob
            ngx.print(blob)
            ';
        }

        # match /i1/*
        location ~ "^/i1/(?<tfsname>[[:alnum:]\._]{18,50})" {
            set_by_lua $reqPath '
                local cache = require "util.cache"
                return cache.path_src2(ngx.var.g_src, ngx.var.tfsname, ngx.var.g_fmt, ngx.var.g_q)
            ';
            set $filePath "$image_root$reqPath";
            if (-f $filePath) {
                rewrite ^ /innerImages$reqPath last;
            }
            if (!-f $filePath) {
                rewrite_by_lua '
                local img_server = require "imageserver"
                local cache = require "util.cache"

                local img, err = img_server.get_tfs_as_img(ngx.var.v1_url .. "/", ngx.var.tfsname)
                if not (img) then
                    ngx.req.set_uri("/v1/tfs/" .. ngx.var.tfsname, true)
                end
                if img:get_format() == "gif" then
                    ngx.req.set_uri("/i1/src/" .. ngx.var.tfsname, true)
                end
                if ngx.var.g_q ~= "" then
                    img:set_quality(tonumber(ngx.var.g_q))
                end

                img:to_webp(ngx.var.g_fmt)

                local ok, msg, code = img:write(ngx.var.filePath)
                img:destroy()
                if not (ok) then
                    ngx.log(ngx.ERR, "ivk method[img:write] error, code:" .. code .. " msg:" .. msg)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true)
                ';
            }
        }

        # match /i1/src/*
        location ~ "^/i1/src/(?<tfsname>[[:alnum:]\._]{18,50})" {
            set_by_lua $reqPath '
                local cache = require "util.cache"
                return cache.path_src(ngx.var.g_tfs, ngx.var.tfsname)
            ';
            set $filePath "$image_root$reqPath";
            if (-f $filePath) {
                rewrite ^ /innerImages$reqPath last;
            }
            if (!-f $filePath) {
                rewrite_by_lua '
                local img_server = require "imageserver"

                local body, err = img_server.get_tfs_as_blob(ngx.var.v1_url .. "/", ngx.var.tfsname)
                if not (body) then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                local file = io.open(ngx.var.filePath, "w")
                file:write(body)
                file:close()

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true)
                ';
            }
        }

        # match /i5/*
        location ~ "^/i5/(?<tfsname>[[:alnum:]\._]{18,50})" {
            set_by_lua $reqPath '
                 local cache = require "util.cache"
                 return cache.path_src(ngx.var.g_tfs, ngx.var.tfsname)
            ';
            set $filePath "$image_root$reqPath";
            if (-f $filePath) {
                rewrite ^ /innerCahe$reqPath last;
            }
            if (!-f $filePath) {
                rewrite_by_lua '
                local img_server = require "imageserver"

                local body, err = img_server.get_tfs_as_blob(ngx.var.v1_url .. "/", ngx.var.tfsname)
                if not (body) then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                local file = io.open(ngx.var.filePath, "w")
                file:write(body)
                file:close()

                ngx.req.set_uri("/innerCahe" .. ngx.var.reqPath, true)
                ';
            }
        }

        # GET /get?key=some_key
        location /get {
            #set_unescape_uri $key $arg_key;  # this requires ngx_set_misc
            set $key $arg_key;  # this requires ngx_set_misc
            redis2_query get $key;
            redis2_pass redis_6384;
        }
        
        location  /redis_6384 {
            redis2_raw_queries $args $echo_request_body;
            redis2_pass redis_6384;
            redis2_connect_timeout 500ms;
            redis2_read_timeout 500ms;
            redis2_send_timeout 500ms;
        }

        location ~ "^/(?:.*?/)?(?:\w+)_([1-9]\d{2})/(?<g_gv>nw|ne|se|sw|ct),(T[[:alnum:]_\.]{17,22}),(T[[:alnum:]_\.]{17,22})$" {
            set $g_w $1;
            set $g_h $1;
            set $img_1 $3;
            set $img_2 $4;
            rewrite ^ /i4/$img_1,$img_2 last;
        }

        # match /i4/c_tfsname,b_tfsname
        location ~ "^/i4/(T[[:alnum:]_\.]{17,22}),(T[[:alnum:]_\.]{17,22})$" {
            set $c_name $1;
            set $b_name $2;
            set $_src '';
            set $_size '';
            set $_q '';
            set $_fmt '';
            set_by_lua $reqPath '
                local cache = require "util.cache"
                if cache.isNil(ngx.var.g_gv) then
                    ngx.var.g_gv = "nw"
                end
                local _path, _src, _size, _q, _fmt = cache.path_comp(
                    ngx.var.g_usr, ngx.var.c_name, ngx.var.b_name, 
                    ngx.var.g_fmt, ngx.var.g_q, 
                    ngx.var.g_w, ngx.var.g_h, ngx.var.g_r, 
                    ngx.var.g_gv, ngx.var.g_gv_x, ngx.var.g_gv_y)
                ngx.var._src = _src
                ngx.var._size = _size
                ngx.var._q = _q
                ngx.var._fmt = _fmt
                return _path     
            ';
            set $filePath "$image_root$reqPath";
            if (-f $filePath) {
                rewrite ^ /innerImages$reqPath last;
            }
            if (!-f $filePath) {
                rewrite_by_lua '
                local img_server = require "imageserver"
                local i_util = require "magick.thumb"
                local cache = require "util.cache"

                local src_f, img, err
                local trace = cache.make_trace()
                if _q ~= "" then
                     src_f = ngx.var.image_root .. ngx.var._src .. ngx.var._size .. ngx.var._q
                      img = img_server.load_image(src_f)
                end
                if _size ~= "" and img == nil then
                    src_f = ngx.var.image_root .. ngx.var._src .. ngx.var._size
                    img = img_server.load_image(src_f)
                else
                    trace("_q", true)
                end
                if img == nil then
                    -- composite
                    img, err = img_server.get_composite_as_image( 
                        ngx.var.v1_url, ngx.var.b_name, ngx.var.c_name, ngx.var.g_gv)
                else
                    trace("_size", true)
                end
                if not (img) then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                -- resize
                if not trace("_size") and ngx.var._size ~= "" then
                    i_util.resize(img, ngx.var.g_w, ngx.var.g_h, ngx.var.g_r)
                end

                if not trace("_q") and ngx.var._q ~= "" then
                    img:set_quality(tonumber(ngx.var.g_q))
                end

                img:to_webp(ngx.var.g_fmt)

                -- write file to local 
                cache.make_dir(ngx.var.filePath)
                local ok, msg, code = img:write(ngx.var.filePath)
                img:destroy()
                if not (ok) then
                    ngx.log(ngx.ERR, "ivk method[img:write] error, code:" .. code .. " msg:" .. msg)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true);   
                ';
            }
        }

        location ~ "^/tfs/(orig/|)(nw|ne|se|sw|ct),(?<tail>T[[:alnum:]_\.,]{36,50})$" {
            set $g_gv $2;
            rewrite ^ /i4/$tail last;
        }

        # match /tfs/norm_100/tfs or /tfs/norm_m_100/tfsname
        location ~ "^/tfs/norm(_m|)_(\d+)/([[:alnum:]_\.]{18,50})$" {
            set $g_w $2;
            set $g_h $2;
            set $tail $3;
            rewrite ^ /i2/$tail last;
        }

        # get/post big file 
        location ~ "^/tfs/big" {
            # https://github.com/openresty/lua-nginx-module#ngxreqget_body_data
            client_max_body_size 75m;
            client_body_buffer_size 75m;
            types {}
            default_type "";
            if ($request_method = "GET") {
                rewrite ^/tfs/big/(.*) /v1/tfs/$1 last;
            }
            if ($request_method = "HEAD") {
                rewrite ^/tfs/big/(.*) /v1/tfs/$1 last;
            }
            if ($host ~ 'img.ffanimg.com' ) {
               return 404;
            }
            if ($host !~ '^tfs.intra.*$' ) {
               return 403;
            }
            if ($request_method = "POST") {
                content_by_lua '
                local cjson = require "cjson"
                local request_method = ngx.var.request_method
                ngx.req.read_body()
                local body_data = ngx.req.get_body_data()
                if body_data == nil then
                    ngx.exit(413)
                end
                local http = require "resty.http"
                local hc = http:new()
                local args = ngx.var.args
                if args == nil  then args = "" end
                local ok, code, headers, status, body  = hc:request { url = ngx.var.v1_url .. 
                    "?" .. args, method="POST",  body=body_data}
                if code ~= 200 then
                    ngx.exit(code)
                end
                local data = cjson.decode(body);
                local tfsname = data["TFS_FILE_NAME"]
                local ngxhelper = require "util.ngxhelper"
                local clientip = ngxhelper.get_client_ip(ngx.var.http_x_forwarded_for)
                ngx.log(ngx.ERR, "POST:" 
                    .. tfsname ..", " 
                    .. string.len(body_data) .. ", " 
                    .. clientip)
                ngx.print(tfsname)
                ';
            }
        }

        # get/post less than 5m file and will set response header
        location ~ "^/tfs" {
            client_max_body_size 5m;
            client_body_buffer_size 5m;
            types {}
            default_type "";
            if ($host ~ 'img.ffanimg.com' ) {
               return 404;
            }
            if ($request_method = "GET") {
                rewrite ^/tfs/(.*) /v2/tfs/$1 last;
            }
            if ($request_method = "HEAD") {
                rewrite ^/tfs/(.*) /v1/tfs/$1 last;
            }
            if ($request_method = "PUT") {
                rewrite ^/tfs/(.*) /v1/tfs/$1 last; 
            }
            if ($request_method = "DELETE") {
                rewrite ^/tfs/(.*) /v1/tfs/$1 last; 
            }
            if ($request_method = "POST") {
                content_by_lua '
                local cjson = require "cjson"
                local request_method = ngx.var.request_method
                ngx.req.read_body()
                local body_data = ngx.req.get_body_data()
                if body_data == nil then
                    ngx.exit(413)
                end
                local http = require "resty.http"
                local hc = http:new()
                local args = ngx.var.args
                if args == nil  then args = "" end
                local ok, code, headers, status, body  = hc:request { url = ngx.var.v1_url .. 
                    "?" .. args, method="POST",  body=body_data}
                if code ~= 200 then
                    ngx.exit(code)
                end
                local data = cjson.decode(body);
                local tfsname = data["TFS_FILE_NAME"]
                local ngxhelper = require "util.ngxhelper"
                local clientip = ngxhelper.get_client_ip(ngx.var.http_x_forwarded_for)
                ngx.log(ngx.ERR, "POST:" 
                    .. tfsname ..", " 
                    .. string.len(body_data) .. ", " 
                    .. clientip)
                ngx.print(tfsname)
                ';
            }
        }

        # match /norm_100/tfs or /norm_m_100/tfsname
        location ~ "^/norm(_m|)_(\d+)/([[:alnum:]_\.]{18,50})$" {
            set $g_w $2;
            set $g_h $2;
            set $tail $3;
            rewrite ^ /i2/$tail last;
        }

        location ~ "/norm_m_(\d{1,3})/(.+)$" {
            set $size $1;
            set $tail $2;
            rewrite ^ /norm_$size/$tail last;
        }

        # match /i2/tfsname
        location ~ "^/i2/(T[[:alnum:]_\.]{17,22})$" {
            set $tfsname $1;
            set $_src '';
            set $_q '';
            set $_fmt '';
            set_by_lua $reqPath '
                local cache = require "util.cache"
                local _path, _src, _q, _fmt = cache.path_zoom(ngx.var.g_nor, ngx.var.tfsname, 
                    ngx.var.g_fmt, ngx.var.g_q, 
                    ngx.var.g_w, ngx.var.g_h, ngx.var.g_r)
                if _path == nil then
                    ngx.log(ngx.ERR, "not set size in i2 path")
                end
                ngx.var._src = _src
                ngx.var._q = _q
                ngx.var._fmt = _fmt
                return _path     
            ';
            if ($reqPath = '') {
                return 404;
            }
            if ( $tfsname ~* "^h00.*") {
                return 404;
            }
            set $filePath "$image_root$reqPath";
            if (-f $filePath) {
                rewrite ^ /innerImages$reqPath last;
            }
            if (!-f $filePath) {
                rewrite_by_lua '
                local img_server = require "imageserver"
                local i_util = require "magick.thumb"
                local cache = require "util.cache"

                local src_f, img, err
                local trace = cache.make_trace()
                if _q ~= "" then
                    src_f = ngx.var.image_root .. ngx.var._src .. ngx.var._q
                    img = img_server.load_image(src_f)
                end
                if img == nil then
                    src_f = ngx.var.image_root .. ngx.var._src
                    img = img_server.load_image(src_f)
                else
                    trace("_q", true)
                end
                if img == nil then
                    img, err = img_server.get_cache_as_img(ngx.var.v1_url, ngx.var.tfsname)
                else
                    trace("_size", true)
                end
                if not (img) then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                -- resize
                if not trace("_size") then
                    i_util.resize(img, ngx.var.g_w, ngx.var.g_h, ngx.var.g_r)
                end

                if not trace("_q") and ngx.var._q ~= "" then
                    img:set_quality(tonumber(ngx.var.g_q))
                end

                img:to_webp(ngx.var.g_fmt)

                -- write file to local 
                cache.make_dir(ngx.var.filePath)
                local ok, msg, code = img:write(ngx.var.filePath)
                img:destroy()
                if not (ok) then
                    ngx.log(ngx.ERR, "ivk method[img:write] error, code:" .. code .. " msg:" .. msg)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true);   
                ';
            }
        }

        location / {
            return 404;
        }
    }
}
