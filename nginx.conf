# resty.http: from https://github.com/liseen/lua-resty-http
#user  nginx;
worker_processes  2;

#error_log  logs/error.log debug_core debug_http;
error_log   logs/error.log;
#warn;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

# load modules compiled as Dynamic Shared Object (DSO)
#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}

http {
    include       mime.types;
    #default_type  application/octet-stream;
    default_type  text/html;    
    
    lua_package_path "/home/admin/conf/lua/?.lua;;";
    lua_shared_dict htmls 4m;
    proxy_buffers 8 1m;
    proxy_busy_buffers_size  1m;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent $request_length $request_time "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for" "$host"';

    access_log  logs/access.log  main;
    log_empty_request off;
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    upstream redis_6384{
        #server unix:/home/shaojun3/tmp/redis_test/data/redis_test_1_online.sock weight=1 max_fails=3 fail_timeout=1s;
        server 10.213.33.155:10388 weight=1 max_fails=3 fail_timeout=1s;
        keepalive 512;
    }

    tfs_upstream tfs_ns {
        server 10.213.33.177:11100;
        type ns;
        #rcs_zone name=tfs1 size=128M;
        #rcs_interface eth0;
        #rcs_heartbeat lock_file=/logs/lk.file interval=10s;
    }
    tfs_body_buffer_size 2m;
    tfs_send_timeout 3s;
    tfs_connect_timeout 3s;
    tfs_read_timeout 3s;
    #gzip  on;
    server {
        listen 10500;
        listen 80;
        server_name 10.77.135.117;
        #chunked_transfer_encoding       off;
        set $v1_url "http://127.0.0.1:10500/v1/tfs";
        set $image_root /usr/local/tfsimage;
        # tfs bug?: nginx-tfs-master/src/ngx_tfs_common.h:#define NGX_HTTP_TFS_MAX_FRAGMENT_SIZE                 (8 * 1024 * 1024)   
        client_max_body_size  1024m;
        tfs_keepalive max_cached=50 bucket_count=10;
        tfs_log "pipe:/usr/sbin/cronolog -p 30min /usr/local/tengine/logs/cronolog/%Y/%m/%Y-%m-%d-%H-%M-tfs_access.log";

        # temporary location for 12.12. Must precede other locations
        location ~ "^/(.*)/label_(\d+)_(T[^/]{17,50})$" {
            set $path $1;
            set $label_id $2;
            set $tfsname  $3;
            rewrite ^ /$path/label_$label_id/$tfsname last;
            # content_by_lua '
            # ngx.say(ngx.var.path .. " " .. ngx.var.uri)
            # ';
        }

        # # mfs => tfs
        location ~ "^/(.*)/([^/]*)h00([[:alnum:]_]{30,50})$" {
            set $path $1;
            set $h00prefix $2;
            set $h00name $3;
            rewrite_by_lua '
            local img_server = require "imageserver"
            local tfs_name = img_server.get_tfsname(ngx.var.h00name)
            if tfs_name == nil then
                ngx.exit(ngx.HTTP_NOT_FOUND)
            else
            
            ngx.req.set_uri("/" .. ngx.var.path .. "/" .. ngx.var.h00prefix .. tfs_name, true)
            end
            ';
        }

        location ~ "^/v1/tfs/orig/[[:alnum:]\._]{18,50}$" {
            rewrite ^/v1/tfs/orig/(.*) /v1/tfs/$1 last;
        }

        location ~^/v1/tfs {
            #chunked_transfer_encoding       off;
            tfs_pass tfs://tfs_ns;
        }


        # GET /get?key=some_key
        location /get {
            #set_unescape_uri $key $arg_key;  # this requires ngx_set_misc
            set $key $arg_key;  # this requires ngx_set_misc
            redis2_query get $key;
            redis2_pass redis_6384;
        }
        
        location /redis_double_write_rpush {
            set $key $arg_key;
            # set $key_unescaped "";
            # set_by_lua $key_unescaped 'local ngx = require "ngx"; return string.gsub(ngx.unescape_uri(ngx.arg[1]), "\\"", "\'")' $key;
            # #content_by_lua 'local ngx = require "ngx"; local key_unescaped = ngx.unescape_uri(ngx.var.key); ngx.print(key_unescaped); ngx.exit(200) ';
            redis2_query rpush tfsname $key;
            redis2_pass 10.77.135.117:16379;
        }

        location  /redis_6384 {
            redis2_raw_queries $args $echo_request_body;
            redis2_pass redis_6384;
            redis2_connect_timeout 500ms;
            redis2_read_timeout 500ms;
            redis2_send_timeout 500ms;
        }

        location  = /tfs/favicon.ico {
            rewrite ^  /favicon.ico break;
        }

        location ~ "^/norm_(\d{1,3})/(nw|ne|se|sw|ct),(T[[:alnum:]_\.]{17}),(T[[:alnum:]_\.]{17})" {
            set $size $1;
            set $gravity $2;
            set $f1 $3;
            set $f2 $4;
            set $reqPath "/${gravity},${f1},${f2}_${size}x${size}";
            set $orig_composite  "${gravity},${f1},${f2}";
            set $filePath "$image_root$reqPath";
            set $file $filePath;

            if (-f $filePath) {
                rewrite ^ /innerImages$reqPath last;
            }

            if (!-f $file) {
                rewrite_by_lua '
                local ngx = require "ngx"
                local img_server = require "imageserver"
                local magick = require "magick"

                local img = magick.load_image(ngx.var.orig_composite)
                if not (img) then
                    img = img_server.get_composite_as_image(ngx.var.v1_url, ngx.var.f2, ngx.var.f1, ngx.var.gravity)
                end
                
                if not (img) then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                
                local size = tonumber(ngx.var.size)
                if size ~= nil then
                    img:resize(size, size)
                end

                local ok, msg, code = img:write(ngx.var.filePath)
                img:destroy()
                if not (ok) then
                    ngx.log(ngx.ERR, "ivk method[img:write] error, code:" .. code .. " msg:" .. msg)          
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end         

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true)
                ';
            }
        }

        location ~ "^/tfs/(orig/|)(nw|ne|se|sw|ct),(T[[:alnum:]_\.]{17}),(T[[:alnum:]_\.]{17})" {
            set $gravity $2;
            set $f1 $3;
            set $f2 $4;
            set $reqPath "/${gravity},${f1},${f2}";
            set $filePath "$image_root$reqPath";
            set $file $filePath;
            # echo "return: $reqPath";
            if (-f $filePath) {
                rewrite ^ /innerImages$reqPath last;
            }
        
            if (!-f $file) {
                rewrite_by_lua '          
                local ngx = require "ngx"
                local img_server = require "imageserver"
                
                local img, err = img_server.get_composite_as_image(ngx.var.v1_url, ngx.var.f2, ngx.var.f1, ngx.var.gravity)
                if not (img) then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                -- write file to local 
                local ok, msg, code = img:write(ngx.var.filePath)
                img:destroy()
                if not (ok) then
                    ngx.log(ngx.ERR, "ivk method[img:write] error, code:" .. code .. " msg:" .. msg)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true); 
            ';
            }
        }
        # todo: merge 500 and 502 server port rule
        # label image on the left-top
        location ~ "^/tfs/(orig/|)label_(\d+)/([[:alnum:]_\.]{18,50})$" {
            set $label_id $2;
            set $tfsname $3;
            set $reqPath "/LABEL_${label_id}_$tfsname";
            set $filePath "$image_root$reqPath";
            set $file $filePath;
            # todo:
            if ( $tfsname ~* "^h00.*") {
                return 404;
            }
            if (-f $filePath) {
                rewrite ^ /innerImages$reqPath last;
            }
            if (!-f $file) {
                rewrite_by_lua '
                local img_server = require "imageserver"
                
                local label_name = "/usr/local/tengine/html/label_" .. ngx.var.label_id .. ".png"
                local img, err = img_server.get_composite_as_image(ngx.var.v1_url, ngx.var.tfsname, label_name, "nw")
                if not (img) then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                -- write file to local 
                local ok, msg, code = img:write(ngx.var.filePath)
                img:destroy()
                if not (ok) then
                    ngx.log(ngx.ERR, "ivk method[img:write] error, code:" .. code .. " msg:" .. msg)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true);
                ';
            }
        }

        location /innerImages {
            internal;
            header_filter_by_lua '
            local ngx = require "ngx"
            ngx.header["Content-Type"] = nil
            ';
            alias /usr/local/tfsimage;
            expires max;
            tcp_nodelay off;
            tcp_nopush on;
        }
        location ~^/tfs {
            client_body_buffer_size 5m;
            types {}
            default_type "";
            if ($uri ~* "/tfs/(.*)") {
                set $fname "$1";
            }
            
            if ($request_method = "POST") {
                content_by_lua '
                local cjson = require "cjson"
                local request_method = ngx.var.request_method
                ngx.req.read_body()
                local uri_args = ngx.req.get_uri_args()
                local body_data = ngx.req.get_body_data()
                --      ngx.print("hello")
                --      ngx.exit(200)
                --      local res = ngx.location.capture("/v1/tfs?", { args = uri_args , method = ngx.HTTP_POST , body = body_data })
                --ngx.print("returns: "..res.body)
                --      ngx.exit(200)
                local http = require "resty.http"
                local hc = http:new()
                local args = ngx.var.args
                if args == nil  then args = "" end
                local ok, code, headers, status, body  = hc:request { url = ngx.var.v1_url .. "?" .. args, method="POST",  body=body_data}
                local data = cjson.decode(body);
                local tfsname = data["TFS_FILE_NAME"]
                --if tfsname ~= nil then
                --      local ok, code, headers, status, body  = hc:request { url = ngx.var.v1_url .. "/metadata/" .. tfsname, method="GET"}
                --      hc:request {url = "http://127.0.0.1:10500/redis_double_write_rpush?key=" .. ngx.escape_uri(body), method="GET"}
                --end
                ngx.print(tfsname)
                ';
            }
            if ($request_method != "POST") {
                rewrite ^/tfs/(.*) /v1/tfs/$1 last;
            }
        }
    
        # # mfs => tfs
        location ~ "^/(.*)/([^/]*)h00([[:alnum:]_]{30,50})$" {
            set $path $1;
            set $h00prefix $2;
            set $h00name $3;
            rewrite_by_lua '
            local img_server = require "imageserver"
            local tfs_name = img_server.get_tfsname(ngx.var.h00name)
            if tfs_name == nil then
            ngx.exit(ngx.HTTP_NOT_FOUND)
            else
            
            ngx.req.set_uri("/" .. ngx.var.path .. "/" .. ngx.var.h00prefix .. tfs_name, true)
            end
            ';
        }

        # temporary location for 12.12. Must precede other locations /label_1_Txxx to /label_1/Txxx rewrite
        location ~ "^/(.*)/label_(\d+)_(T[^/]{17,50})$" {
            set $path $1;
            set $label_id $2;
            set $tfsname  $3;
            rewrite ^ /$path/label_$label_id/$tfsname last;
            # content_by_lua '
            # ngx.say(ngx.var.path .. " " .. ngx.var.uri)
            # ';
        }
        
        # direct tfs
        location ~ "^/norm(_m|)_(\d+)/([[:alnum:]_\.]{18,50})$" {
            set $_size $2;
            set $_id $3;
            rewrite_by_lua '
            local ngx = require "ngx"
            local tfs_name = ngx.var._id
            local tfs_url = "/images/" .. tfs_name .. "." .. ngx.var._size .. "x" .. ngx.var._size
            ngx.req.set_uri(tfs_url, true)
            ';
        }

        location ~ "/norm_m_(\d{1,3})/(.+)$" {
            set $size $1;
            set $other $2;
            rewrite ^  /norm_$size/$other last;
            # content_by_lua '
            # ngx.say(ngx.var.uri)
            # ';
        }

        # label image on the left-top
        location ~ "^/(norm_\d{1,3}/|orig/|)label_(\d+)/([[:alnum:]_\.]{18,50})$" {
            set $label_id $2;
            set $tfsname $3;
            set $reqPath "/LABEL_${label_id}_$tfsname";
            set $g1 $1;
            if ($g1 ~ "norm_(\d{1,3})/)" { set $size_x $1; set $size_y $1; set $reqPath "${reqPath}.$1x$1"; }
            set $filePath "$image_root$reqPath";
            set $file $filePath;
            # todo: 
            if ( $tfsname ~* "^h00.*") {
                return 404;
            }
            if (-f $filePath) {
                rewrite ^ /innerImages$reqPath last;
            }
            if (!-f $file) {
                rewrite_by_lua '
                local img_server = require "imageserver"
                
                -- composite
                local label_name = "/usr/local/tengine/html/label_" .. ngx.var.label_id .. ".png"
                local img, err = img_server.get_composite_as_image(ngx.var.v1_url, ngx.var.tfsname, label_name, "nw")
                if not (img) then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                
                -- resize
                local size_x = tonumber(ngx.var.size_x)
                local size_y = tonumber(ngx.var.size_y)
                if (size_x ~= nil and size_y ~= nil) then
                    img:resize(size_x, size_y)
                end

                -- write file to local 
                local ok, msg, code = img:write(ngx.var.filePath)
                img:destroy()
                if not (ok) then
                    ngx.log(ngx.ERR, "ivk method[img:write] error, code:" .. code .. " msg:" .. msg)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true);   
                ';
            }
        }

        location /images/ {
            #internal;
            set $matched 0;
            if ($uri ~* "/images/(.*?)\.(\d{1,3})x(\d{1,3})$") {
                set $filePath "$image_root/$1.$2x$3";
                set $size_x $2;
                set $size_y $3;
                set $reqPath "/$1.$2x$3";
                set $tfsname "$1";
            } 
            
            if ( $tfsname ~* "^h00.*") {
                return 404;
            }
            set $file "$image_root$reqPath";
            if (-f $file) {
                rewrite "/images/(.+)" /innerImages$reqPath last;
            }
            
            if (!-f $file) { 
                rewrite_by_lua '
                local img_server = require "imageserver"

                local img, err = img_server.get_tfs_as_img(ngx.var.v1_url .. "/", ngx.var.tfsname)
                if not (img) then
                    ngx.log(ngx.ERR, err)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                
                local size_x = tonumber(ngx.var.size_x)
                local size_y = tonumber(ngx.var.size_y)
                if (size_x ~= nil and size_y ~= nil) then
                    img:resize(size_x, size_y)
                end

                -- write file to local 
                local ok, msg, code = img:write(ngx.var.filePath)
                img:destroy()
                if not (ok) then
                    ngx.log(ngx.ERR, "ivk method[img:write] error, code:" .. code .. " msg:" .. msg)
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.req.set_uri("/innerImages" .. ngx.var.reqPath, true);
                ';
            }
        }
    }
}
